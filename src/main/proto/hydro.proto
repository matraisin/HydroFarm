syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.hydrofarm.grpc";
option java_outer_classname = "HydroProto";

service HydroService {
  // Streaming sensor data every 5 seconds
  rpc StreamSensorData(Empty) returns (stream SensorData);

  // Trigger emergency irrigation shutdown
  rpc EmergencyShutdown(Empty) returns (ShutdownResponse);
}

message Empty {}

message SensorData {
  string timestamp = 1;
  float temperature = 2;
  float humidity = 3;
  float pH = 4;
}

message ShutdownResponse {
  string status = 1;
}


// --- Greenhouse Environmental Monitoring ---

service EnvironmentService {
  rpc StreamEnvironmentData(Empty) returns (stream EnvironmentData);
}

message EnvironmentData {
  string timestamp = 1;
  float temperature = 2;
  float humidity = 3;
  float co2 = 4;
}


// --- Pest and Strain Monitoring ---

service PestService {
  rpc StreamPestData(Empty) returns (stream PestData);
}

message PestData {
  string timestamp = 1;
  int32 pestLevel = 2;       // 0–100 scale
  int32 strainHealth = 3;    // 0–100 scale
}

// --- Storage and Pump Monitoring ---
service StorageService {
  rpc StreamStorageData(Empty) returns (stream StorageData);
}

message StorageData {
  string timestamp = 1;
  float capacityPercent = 2;   // 0–100% full
  string pumpStatus = 3;       // "ON" / "OFF"
}

// --- Nutrient Solution Monitor ---
service NutrientMonitor {
  rpc GetNutrientStatus(TankRequest) returns (NutrientData);           // Unary
  rpc CalibrateSolution(CalibrationRequest) returns (stream CalibrationProgress); // Server streaming
}

message TankRequest {
  string tank_id = 1; // e.g., UUID or tank name
}

message NutrientData {
  float ph = 1;
  float ec = 2;
  int32 ppm = 3;
}

message CalibrationRequest {
  string tank_id = 1;
  float adjustment_volume = 2;
}

message CalibrationProgress {
  string message = 1;
  float current_ph = 2;
}

// --- Storage Management Service ---
service StorageManager {
  rpc CheckStorageAvailability(Empty) returns (StorageAvailability);   // Unary
  rpc CheckStorageHealth(Empty) returns (StorageHealth);               // Unary
  rpc ReserveStorage(StorageReservationRequest) returns (StorageResponse); // Unary with deadline
}

message StorageAvailability {
  float capacity_percent = 1;
}

message StorageHealth {
  float temperature = 1;
  float humidity = 2;
}

message StorageReservationRequest {
  string crop_type = 1;
  int32 quantity = 2;
}

message StorageResponse {
  string status = 1;
}
